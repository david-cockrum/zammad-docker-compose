#!/bin/bash

# Setup Cron Jobs for Automatic Session Tracking
# This script configures periodic snapshots and reports

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
CRON_SCRIPT="${SCRIPT_DIR}/cron-tasks.sh"

# Create the cron tasks script
cat > "${CRON_SCRIPT}" << 'EOF'
#!/bin/bash

# Cron Tasks for Session Tracking
# This script is executed by cron at regular intervals

SESSION_DIR="${HOME}/.session-tracker"
ARCHIVE_DIR="${SESSION_DIR}/archive"
REPORTS_DIR="${SESSION_DIR}/reports"
LOG_FILE="${SESSION_DIR}/cron.log"

# Create directories
mkdir -p "${ARCHIVE_DIR}"
mkdir -p "${REPORTS_DIR}"

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "${LOG_FILE}"
}

# Task: Hourly snapshot
hourly_snapshot() {
    log_message "Starting hourly snapshot"
    
    local snapshot_dir="${ARCHIVE_DIR}/snapshots/$(date +%Y-%m-%d)"
    local snapshot_file="${snapshot_dir}/snapshot-$(date +%H%M).tar.gz"
    
    mkdir -p "${snapshot_dir}"
    
    # Create snapshot of current session data
    tar -czf "${snapshot_file}" \
        -C "${SESSION_DIR}" \
        --exclude="archive" \
        --exclude="reports" \
        current metadata.json commands.log 2>/dev/null || true
    
    log_message "Hourly snapshot saved to ${snapshot_file}"
}

# Task: Daily report
daily_report() {
    log_message "Generating daily report"
    
    local report_date=$(date +%Y-%m-%d)
    local report_file="${REPORTS_DIR}/daily-${report_date}.md"
    
    cat > "${report_file}" << REPORT
# Daily Session Report - ${report_date}

**Generated**: $(date '+%Y-%m-%d %H:%M:%S')
**System**: $(hostname)
**User**: $(whoami)

## Activity Summary

### Commands Executed
$(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "CMD:" | wc -l) commands

### Top 10 Commands
\`\`\`
$(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "CMD:" | sed 's/.*CMD: //' | awk '{print $1}' | sort | uniq -c | sort -rn | head -10)
\`\`\`

### Directories Accessed
\`\`\`
$(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "PWD:" | sed 's/.*PWD: //' | sort -u)
\`\`\`

### Git Activity
- Branches used: $(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "BRANCH:" | sort -u | wc -l)
- Git commands: $(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "CMD: git" | wc -l)

### Session Files
- Total size: $(du -sh "${SESSION_DIR}" 2>/dev/null | awk '{print $1}')
- Number of snapshots: $(find "${ARCHIVE_DIR}/snapshots/${report_date}" -name "*.tar.gz" 2>/dev/null | wc -l)

## Time Distribution

### Activity by Hour
\`\`\`
$(grep "${report_date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "CMD:" | awk '{print substr($2,1,2)}' | sort | uniq -c)
\`\`\`

---
*Auto-generated by session tracking system*
REPORT
    
    log_message "Daily report saved to ${report_file}"
    
    # Send email notification if configured
    if [ -n "${SESSION_REPORT_EMAIL}" ]; then
        mail -s "Daily Session Report - ${report_date}" "${SESSION_REPORT_EMAIL}" < "${report_file}" 2>/dev/null || \
            log_message "Failed to send email report"
    fi
}

# Task: Weekly cleanup
weekly_cleanup() {
    log_message "Starting weekly cleanup"
    
    # Remove old snapshots (older than 30 days)
    find "${ARCHIVE_DIR}/snapshots" -name "*.tar.gz" -mtime +30 -delete 2>/dev/null
    
    # Compress old logs (older than 7 days)
    find "${SESSION_DIR}" -name "*.log" -mtime +7 -exec gzip {} \; 2>/dev/null
    
    # Remove old reports (older than 90 days)
    find "${REPORTS_DIR}" -name "*.md" -mtime +90 -delete 2>/dev/null
    
    log_message "Weekly cleanup completed"
}

# Task: Generate analytics
generate_analytics() {
    log_message "Generating analytics"
    
    local analytics_file="${REPORTS_DIR}/analytics-$(date +%Y-%m).json"
    
    cat > "${analytics_file}" << ANALYTICS
{
    "month": "$(date +%Y-%m)",
    "generated": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
    "statistics": {
        "total_commands": $(grep "CMD:" "${SESSION_DIR}/commands.log" 2>/dev/null | wc -l),
        "unique_commands": $(grep "CMD:" "${SESSION_DIR}/commands.log" 2>/dev/null | sed 's/.*CMD: //' | awk '{print $1}' | sort -u | wc -l),
        "directories_accessed": $(grep "PWD:" "${SESSION_DIR}/commands.log" 2>/dev/null | sed 's/.*PWD: //' | sort -u | wc -l),
        "git_branches": $(grep "BRANCH:" "${SESSION_DIR}/commands.log" 2>/dev/null | sed 's/.*BRANCH: //' | sort -u | wc -l),
        "active_days": $(grep "CMD:" "${SESSION_DIR}/commands.log" 2>/dev/null | awk '{print $1}' | sed 's/\[//' | sort -u | wc -l)
    },
    "top_commands": [
$(grep "CMD:" "${SESSION_DIR}/commands.log" 2>/dev/null | sed 's/.*CMD: //' | awk '{print $1}' | sort | uniq -c | sort -rn | head -5 | awk '{printf "        {\"command\": \"%s\", \"count\": %d},\n", $2, $1}' | sed '$ s/,$//')
    ],
    "daily_activity": [
$(for i in {0..6}; do
    date=$(date -d "$i days ago" +%Y-%m-%d 2>/dev/null || date -v-${i}d +%Y-%m-%d)
    count=$(grep "${date}" "${SESSION_DIR}/commands.log" 2>/dev/null | grep "CMD:" | wc -l)
    printf '        {"date": "%s", "commands": %d},\n' "${date}" "${count}"
done | sed '$ s/,$//')
    ]
}
ANALYTICS
    
    log_message "Analytics saved to ${analytics_file}"
}

# Determine which task to run based on argument
case "${1:-hourly}" in
    hourly)
        hourly_snapshot
        ;;
    daily)
        daily_report
        generate_analytics
        ;;
    weekly)
        weekly_cleanup
        ;;
    all)
        hourly_snapshot
        daily_report
        weekly_cleanup
        generate_analytics
        ;;
    *)
        echo "Usage: $0 {hourly|daily|weekly|all}"
        exit 1
        ;;
esac
EOF

chmod +x "${CRON_SCRIPT}"

# Function to add cron job
add_cron_job() {
    local schedule="$1"
    local task="$2"
    local job="${schedule} ${CRON_SCRIPT} ${task}"
    
    # Check if job already exists
    if crontab -l 2>/dev/null | grep -q "${CRON_SCRIPT} ${task}"; then
        echo "Cron job for ${task} already exists"
    else
        # Add the job
        (crontab -l 2>/dev/null; echo "${job}") | crontab -
        echo "Added cron job: ${job}"
    fi
}

# Function to remove cron jobs
remove_cron_jobs() {
    crontab -l 2>/dev/null | grep -v "${CRON_SCRIPT}" | crontab -
    echo "Removed all session tracking cron jobs"
}

# Main setup
echo "Setting up cron jobs for automatic session tracking..."
echo ""

case "${1:-install}" in
    install)
        echo "Installing cron jobs..."
        
        # Hourly snapshot (every hour at minute 0)
        add_cron_job "0 * * * *" "hourly"
        
        # Daily report (every day at 23:55)
        add_cron_job "55 23 * * *" "daily"
        
        # Weekly cleanup (every Sunday at 3:00 AM)
        add_cron_job "0 3 * * 0" "weekly"
        
        echo ""
        echo "Cron jobs installed successfully!"
        echo ""
        echo "Current crontab:"
        crontab -l | grep "${CRON_SCRIPT}" || echo "No session tracking jobs found"
        ;;
        
    uninstall)
        echo "Removing cron jobs..."
        remove_cron_jobs
        ;;
        
    status)
        echo "Current session tracking cron jobs:"
        crontab -l 2>/dev/null | grep "${CRON_SCRIPT}" || echo "No session tracking jobs found"
        ;;
        
    test)
        echo "Testing cron tasks..."
        echo ""
        echo "Running hourly snapshot..."
        "${CRON_SCRIPT}" hourly
        echo ""
        echo "Running daily report..."
        "${CRON_SCRIPT}" daily
        echo ""
        echo "Test complete. Check ${HOME}/.session-tracker/ for results."
        ;;
        
    *)
        echo "Usage: $0 {install|uninstall|status|test}"
        echo ""
        echo "  install   - Install all cron jobs"
        echo "  uninstall - Remove all cron jobs"
        echo "  status    - Show current cron jobs"
        echo "  test      - Test run the cron tasks"
        exit 1
        ;;
esac
