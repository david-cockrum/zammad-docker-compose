---
name: Docker Scout Security Analysis

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
      - develop
  schedule:
    # Run security scan every Monday at 9 AM
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to scan'
        required: false
        default: 'latest'

env:
  IMAGE_NAME: ghcr.io/zammad/zammad
  DOCKER_ORG: vantagepointconsult
  
jobs:
  scout-analysis:
    name: Docker Scout Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Determine image version
        id: image_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.image_tag }}" ]; then
            echo "version=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            # Extract version from docker-compose.yml
            VERSION=$(grep "VERSION:-" docker-compose.yml | head -1 | sed 's/.*VERSION:-\([^}]*\).*/\1/')
            echo "version=${VERSION:-6.5.1}" >> $GITHUB_OUTPUT
          fi
      
      - name: Docker Scout CVE Analysis
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ env.IMAGE_NAME }}:${{ steps.image_version.outputs.version }}
          organization: ${{ env.DOCKER_ORG }}
          only-severities: critical,high
          exit-code: false
          write-comment: true
      
      - name: Docker Scout Recommendations
        if: always()
        uses: docker/scout-action@v1
        with:
          command: recommendations
          image: ${{ env.IMAGE_NAME }}:${{ steps.image_version.outputs.version }}
          organization: ${{ env.DOCKER_ORG }}
          only-fix-available: true
      
      - name: Docker Scout Compare with Latest
        if: github.event_name == 'pull_request'
        uses: docker/scout-action@v1
        with:
          command: compare
          image: ${{ env.IMAGE_NAME }}:${{ steps.image_version.outputs.version }}
          to: ${{ env.IMAGE_NAME }}:latest
          organization: ${{ env.DOCKER_ORG }}
          exit-code: false
          write-comment: true

  build-and-scan-custom:
    name: Build and Scan Custom Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            docker.io/${{ env.DOCKER_ORG }}/zammad
            ghcr.io/${{ github.repository_owner }}/zammad
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Check if Dockerfile exists
        id: dockerfile_check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image (if Dockerfile exists)
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/image.tar
      
      - name: Load and scan built image
        if: steps.dockerfile_check.outputs.dockerfile_exists == 'true'
        run: |
          docker load --input /tmp/image.tar
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker scout cves $IMAGE_TAG --org ${{ env.DOCKER_ORG }}
      
      - name: Push image if secure
        if: |
          steps.dockerfile_check.outputs.dockerfile_exists == 'true' &&
          github.event_name == 'push' &&
          github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  policy-evaluation:
    name: Policy Compliance Check
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep "VERSION:-" docker-compose.yml | head -1 | sed 's/.*VERSION:-\([^}]*\).*/\1/')
          echo "version=${VERSION:-6.5.1}" >> $GITHUB_OUTPUT
      
      - name: Docker Scout Policy Evaluation
        continue-on-error: true
        run: |
          docker scout policy ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            --org ${{ env.DOCKER_ORG }} \
            --exit-code-policy-evaluation 0 || true

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep "VERSION:-" docker-compose.yml | head -1 | sed 's/.*VERSION:-\([^}]*\).*/\1/')
          echo "version=${VERSION:-6.5.1}" >> $GITHUB_OUTPUT
      
      - name: Generate SBOM with Docker Scout
        run: |
          docker scout sbom --format spdx \
            --output zammad-sbom.spdx.json \
            ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
      
      - name: Upload SBOM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: zammad-sbom
          path: zammad-sbom.spdx.json
          retention-days: 30
      
      - name: Generate SBOM summary
        run: |
          echo "## ðŸ“¦ Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "SBOM has been generated for **${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download the SBOM artifact from the workflow run artifacts." >> $GITHUB_STEP_SUMMARY

  security-summary:
    name: Security Summary Report
    runs-on: ubuntu-latest
    needs: [scout-analysis, policy-evaluation]
    if: always()
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract version
        id: version
        run: |
          VERSION=$(grep "VERSION:-" docker-compose.yml | head -1 | sed 's/.*VERSION:-\([^}]*\).*/\1/')
          echo "version=${VERSION:-6.5.1}" >> $GITHUB_OUTPUT
      
      - name: Generate Security Report
        run: |
          echo "# ðŸ”’ Docker Scout Security Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Organization:** ${{ env.DOCKER_ORG }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Quick vulnerability summary
          echo "## Vulnerability Summary" >> $GITHUB_STEP_SUMMARY
          docker scout quickview ${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            --org ${{ env.DOCKER_ORG }} || echo "Unable to retrieve quickview" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Recommended Actions" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the detailed CVE report in the workflow logs" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the recommendations for base image updates" >> $GITHUB_STEP_SUMMARY
          echo "3. Review and apply security patches as needed" >> $GITHUB_STEP_SUMMARY
          echo "4. Monitor the [Docker Scout Dashboard](https://scout.docker.com/org/${{ env.DOCKER_ORG }})" >> $GITHUB_STEP_SUMMARY
